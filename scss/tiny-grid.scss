// Tiny Grid by @alexerlandsson
// https://alexerlandsson.com

// This is a CSS grid system used to build responsive websites
// and applications. For documentation, check out the GitHub repository:
// https://github.com/alexerlandsson/tiny-grid

// ===== Mixins =====

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin tg-flex-display($display: flex) {
  display: -webkit-#{$display};
  display: -moz-#{$display};
  display: -ms-#{$display}box;
  display: -ms-#{$display};
  display: $display;
}

@mixin tg-flex($value) {
  -webkit-flex: $value;
      -ms-flex: $value;
          flex: $value;
}

@mixin tg-flex-direction($direction: row) {
  -webkit-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

@mixin tg-flex-wrap($wrap: wrap) {
  -webkit-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

@mixin tg-flex-grow($grow: 1) {
  -webkit-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

@mixin tg-flex-basis($width: 0) {
  -webkit-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// ===== Create Grid =====

@mixin tiny-grid {

  // Settings

  $enable-flex: false;

  $grid-container-max-width: 1470px !default;
  $grid-columns: 12 !default;
  $grid-gutter: 1.875rem !default;

  $grid-breakpoints: (
    xs: 375px,
    sm: 640px,
    md: 768px,
    lg: 1025px,
    xl: 1200px
  ) !default;

  // Container Elements

  %container-base {
    @include clearfix;
    margin-left: auto;
    margin-right: auto;
    width: 100%;
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;
    box-sizing: border-box;
  }

  .container {
    @extend %container-base;
    max-width: $grid-container-max-width;
  }

  .container-fluid {
    @extend %container-base;
  }

  .row {
    @include clearfix;
    margin-left: ($grid-gutter / -2);
    margin-right: ($grid-gutter / -2);
    box-sizing: border-box;

    @if $enable-flex {
      [class^="col-"],
      [class*=" col-"] {
        min-height: 1px;
      }
    }
  }

  @if $enable-flex {
    .flex-row {
      @include tg-flex-display;
      @include tg-flex(0 1 auto);
      @include tg-flex-direction(row);
      @include tg-flex-wrap(wrap);
      margin-left: ($grid-gutter / -2);
      margin-right: ($grid-gutter / -2);
      box-sizing: border-box;

      [class^="col-"],
      [class*=" col-"] {
        @include tg-flex(0 0 auto);
        @include tg-flex-grow(1);
        @include tg-flex-basis(100%);
        max-width: 100%;
      }
    }
  }

  // Columns

  [class^="col-"],
  [class*=" col-"] {
    width: 100%;
    float: left;
    padding-left: ($grid-gutter / 2);
    padding-right: ($grid-gutter / 2);
    box-sizing: border-box;
    @if $enable-flex == false {
      min-height: 1px;
    }
  }

  // Create non-breakpoint specific columns and column offsets
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      width: ((100% / $grid-columns) * $i);

      @if $enable-flex {
        .flex-row & {
          @include tg-flex-basis(((100% / $grid-columns) * $i));
          max-width: ((100% / $grid-columns) * $i);
        }
      }
    }
    .col-offset-#{$i} {
      margin-left: ((100% / $grid-columns) * $i);
    }
  }

  // Create breakpoint specific columns
  @each $breakpoint-name in map-keys($grid-breakpoints) {
    // Get each key's value
    $breakpoint-width: map-get($grid-breakpoints, $breakpoint-name);

    // Create media query for each breakpoint
    @media (min-width: $breakpoint-width) {
      // Add offset-0 to reset offset in specific breakpoints
      .col-#{$breakpoint-name}-offset-0 {
        margin-left: 0;
      }

      // Create columns and column offsets for each size in this breakpoint
      @for $i from 1 through $grid-columns {
        .col-#{$breakpoint-name}-#{$i} {
          width: ((100% / $grid-columns) * $i);

          @if $enable-flex {
            .flex-row & {
              @include tg-flex-basis(((100% / $grid-columns) * $i));
              max-width: ((100% / $grid-columns) * $i);
            }
          }
        }
        .col-#{$breakpoint-name}-offset-#{$i} {
          margin-left: ((100% / $grid-columns) * $i);
        }
      }
    }
  }
}
@include tiny-grid;
